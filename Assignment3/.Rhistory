install.packages("git2r")
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
# or devtools::install_local('IRkernel-master.tar.gz')
IRkernel::installspec()  # to register the kernel in the current R installation
IRkernel::installspec(())
IRkernel::installspec()
install.packages('XML')
install.packages('RCurl')
install.packages("RVest")
install.packages("rvest")
require(magrittr)
require(dplyr)
require(mice)
srxData <- read.csv("srx (Team 6).csv", stringsAsFactors = TRUE)
setwd("~/code/dsc4217-team/Assignment3")
require(magrittr)
require(dplyr)
require(mice)
srxData <- read.csv("srx (Team 6).csv", stringsAsFactors = TRUE)
require(magrittr)
require(dplyr)
require(mice)
srxData <- read.csv("srx (Team 6).csv", stringsAsFactors = TRUE)
install.packages("mice")
require(magrittr)
require(dplyr)
require(mice)
srxData <- read.csv("srx (Team 6).csv", stringsAsFactors = TRUE)
srxData %>% head
#na_count <-sapply(srxData, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(srxData, function(y) sum(is.na(y)))
na_count
na_count
#srxData$Property.Name
#srxData$Property.Type   Got time do HDB dummy variable
suppressWarnings(srxData$Asking <- ifelse(srxData$Asking=="View to offer", NA, as.numeric(gsub(",", "", gsub("\\$", "", srxData$Asking)))))
nrow(srxData)
srxData <- read.csv("srx (Team 6).csv", stringsAsFactors = TRUE)
srxData$X <- NULL #get rid of row indices
nrow(srxData)
#na_count <-sapply(srxData, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(srxData, function(y) sum(is.na(y)))
na_count
#srxData$Property.Name
#srxData$Property.Type   Got time do HDB dummy variable
suppressWarnings(srxData$Asking <- ifelse(srxData$Asking=="View to offer", NA, as.numeric(gsub(",", "", gsub("\\$", "", srxData$Asking)))))
srxData$AskingAvail <- !is.na(srxData$Asking) #correspond to those that do not offer their prices. More expensive?. PSF also missing for same reason.
srxData$PSFLand <- as.numeric(gsub(".*[(]Built-up[)].*", "", gsub(",", "", gsub(".*\\$([0-9,]+(?=\\s+psf\\s+[(]Land[)])).*", "\\1", srxData$PSF, perl = TRUE)))) #creates a new numeric vector to store PSF by Land #should I create a factor for when it is NA?
srxData$PSFBuilt <- as.numeric(gsub(".*[(]Land[)].*", "", gsub(",", "", gsub(".*\\$([0-9,]+(?=\\s+psf\\s+[(]Built-up[)])).*", "\\1", srxData$PSF, perl = TRUE)))) #creates a new numeric vector to store PSF by Built
#srxData$Built.Year #should I create a factor for when it is NA?
srxData$Model <- factor(gsub("(?!.*[)])([(].*+)", "\\1)", srxData$Model, perl = TRUE)) #closes unclosed round brackets in the data
#treat the nearly mutually exclusive NA's in HDB Town and District
#manually treat the missing NA for both HDB Town and District
srxData[which((is.na(srxData$HDB.Town) == TRUE) & (is.na(srxData$District) == TRUE)),]$HDB.Town <- "Queenstown"
#A lot of work for Developer
srxData$Developer <- factor(toupper(gsub("(?i)limited(?-i)", "LTD", srxData$Developer)))
srxData$Developer <- factor(gsub("[(]*(?i)PRIVATE[)]*(?-i)", "PTE", srxData$Developer, perl = TRUE))
#manual fixing for spotted errors
srxData$Developer <- factor(gsub("(BUKI SEMABWANG ESTATES LTD)|(BUKIT SEMABWANG ESTATES LTD)", "BUKIT SEMBAWANG ESTATES LIMITED", srxData$Developer)) #should have a dummy for every company. Not sure ASTON and ASTOR are same companies.
srxData$Developer <- factor(gsub("CITY DEVELOPMENT LTD", "CITY DEVELOPMENTS LTD", srxData$Developer))
srxData$Developer <- factor(gsub("ORGANISATION", "ORGANIZATION", srxData$Developer))
srxData$Developer <- factor(gsub("FAIRVIEW DEVELOPMENT PTE LTD", "FAIRVIEW DEVELOPMENTS PTE LTD", srxData$Developer))
srxData$Developer <- ifelse(grepl("HDB",srxData$Property.Type),
"HOUSING DEVELOPMENT BOARD",srxData$Developer)
#srxData$Address ??
#srxData$District #can it be obtained from the address?
#srxData$Bedrooms #is 1+1 same as 2? Is Studio same as 1?
#srxData$Bathrooms #should I create a factor for NA's?
#srxData$Floor #is ground floor same as floor 1? Factor for NA's? high, low and mid floors - how to use?
srxData$Floor <- addNA(srxData$Floor)
levels(srxData$Floor) <- ifelse(grepl("01",levels(srxData$Floor)),"GROUND",levels(srxData$Floor))
sqmToSqftConvFactor <- 10.7639
srxData$AreaLand <- ifelse(grepl("sqft",srxData$Area)|
is.na(srxData$Area),
as.numeric(gsub(".*(([(]Built-up[)])|(sqm)).*", "", gsub(",", "", gsub("^.*(\\s|^)([0-9,]+(?=\\s+sqft\\s+[(]Land[)])).*", "\\2", srxData$Area, perl = TRUE)))),
as.numeric(gsub(".*(([(]Built-up[)])|(sqft)).*", "", gsub(",", "", gsub("^.*(\\s|^)([0-9,]+(?=\\s+sqm\\s+[(]Land[)])).*", "\\2", srxData$Area, perl = TRUE))))*sqmToSqftConvFactor)
srxData$AreaBuilt <- ifelse(grepl("sqft",srxData$Area)|
is.na(srxData$Area),
as.numeric(gsub(".*(([(]Land[)])|(sqm)).*", "", gsub(",", "", gsub("^.*(\\s|^)([0-9,]+(?=\\s+sqft\\s+[(]Built-up[)])).*", "\\2", srxData$Area, perl = TRUE)))),
as.numeric(gsub(".*(([(]Land[)])|(sqft)).*", "", gsub(",", "", gsub("^.*(\\s|^)([0-9,]+(?=\\s+sqm\\s+[(]Built-up[)])).*", "\\2", srxData$Area, perl = TRUE))))*sqmToSqftConvFactor)
levels(srxData$Tenure) <- ifelse(grepl("Freehold",levels(srxData$Tenure)),"FREEHOLD",levels(srxData$Tenure)) #can I just leave the factors as they are? Factor for NA's?
levels(srxData$Tenure) <- ifelse(grepl("946 years from 01/01/1938",levels(srxData$Tenure)) | grepl("946 years from 23/06/1938",levels(srxData$Tenure)) | grepl("947 years from 05/10/1934",levels(srxData$Tenure)),"999 years",levels(srxData$Tenure))
srxData$AreaBuilt <- ifelse(grepl("sqft",srxData$Area)|
is.na(srxData$Area),
as.numeric(gsub(".*(([(]Land[)])|(sqm)).*", "", gsub(",", "", gsub("^.*(\\s|^)([0-9,]+(?=\\s+sqft\\s+[(]Built-up[)])).*", "\\2", srxData$Area, perl = TRUE)))),
as.numeric(gsub(".*(([(]Land[)])|(sqft)).*", "", gsub(",", "", gsub("^.*(\\s|^)([0-9,]+(?=\\s+sqm\\s+[(]Built-up[)])).*", "\\2", srxData$Area, perl = TRUE))))*sqmToSqftConvFactor)
levels(srxData$Tenure) <- ifelse(grepl("Freehold",levels(srxData$Tenure)),"FREEHOLD",levels(srxData$Tenure)) #can I just leave the factors as they are? Factor for NA's?
levels(srxData$Tenure) <- ifelse(grepl("946 years from 01/01/1938",levels(srxData$Tenure)) | grepl("946 years from 23/06/1938",levels(srxData$Tenure)) | grepl("947 years from 05/10/1934",levels(srxData$Tenure)),"999 years",levels(srxData$Tenure))
#srxData$No..of.Units #Factor for NA's?
#srxData$Facilities #split into factors?
#srxData$Agent #Looks ok?
srxData$Furnish <- addNA(srxData$Furnish)
#srxData$HDB.Town #Factor for NA's? How to identify HDBs?
```{r}
require(ggplot2)
require(ggthemes)
install.packages("ggthemes")
# to create a df classifies means PSF by District
psf.pp.df = as.data.frame(tapply(srxData$PSFBuilt, srxData$District, mean, na.rm=TRUE))
colnames(psf.pp.df) = c("PSF")
psf.pp.df$District = rownames(psf.pp.df)
rownames(psf.pp.df) = 1: dim(psf.pp.df)[1]
# sort the factor level of $Distrct in asending order of the corrsponding PSF value (for ploting)
psf.pp.df <- psf.pp.df[order(psf.pp.df$PSF), ]
psf.pp.df$District <- factor(psf.pp.df$District, levels = psf.pp.df$District[order(psf.pp.df$PSF)])
# plot the bar chart
ggplot(psf.pp.df) + geom_bar(aes(x=District, y= PSF),stat="identity", fill="lightpink") + coord_flip()  + labs(x="", y="PSF") + ggtitle("Average PSF of Private Properties by Region") + theme(axis.text.y=element_text(size = rel(0.8))) + theme_minimal()
# to create a df classifies means PSF by HDB.Town
psf.hdb.df = as.data.frame(tapply(srxData$PSFBuilt, srxData$HDB.Town, mean, na.rm=TRUE))
colnames(psf.hdb.df) = c("PSF")
psf.hdb.df$HDB.Town = rownames(psf.hdb.df)
rownames(psf.hdb.df) = 1: dim(psf.hdb.df)[1]
# sort the factor level of $Distrct in asending order of the corrsponding PSF value (for ploting)
psf.hdb.df <- psf.hdb.df[order(psf.hdb.df$PSF), ]
psf.hdb.df$HDB.Town <- factor(psf.hdb.df$HDB.Town, levels = psf.hdb.df$HDB.Town[order(psf.hdb.df$PSF)])
# plot the bar chart
ggplot(psf.hdb.df) + geom_bar(aes(x=HDB.Town, y= PSF),stat="identity", fill="lightblue") + coord_flip()  + labs(x="", y="PSF") + ggtitle("Average PSF of HDB by Region") + theme(axis.text.y=element_text(size = rel(0.8))) + theme_minimal()
srxData %>% head
srxData %>% summary
table(srxData$Property.Type)
mpg
mpg %>% summary
ggplot(srxData, aes(Property.Type, PSFBuilt)) + geom_boxplot()
srx_hdb = srxData[grep('HDB', srxData$Property.Type),]
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) + geom_boxplot()
srx_hdb = srxData[grep('HDB', srxData$Property.Type),]
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) + geom_boxplot()
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) + geom_boxplot(aes(fill="lightblue"))
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) + geom_boxplot(aes(fill="green"))
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) + geom_boxplot(aes(fill="Property.Type"))
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) + geom_boxplot(aes(fill=Property.Type))
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) +
geom_boxplot(aes(fill=Property.Type)) +
ggtitle("PSF Prices distributed by HDB Type")
install.packages("treemapify")
ggplot(srx_hdb, aes(Property.Type, PSFBuilt)) +
geom_boxplot(aes(fill=Property.Type)) +
ggtitle("PSF Prices distributed by HDB Type")
srxData %>% summary
?treemapify
?treemapify
library(treemapify)
library(treemapify)
?treemapify
srxData %>% summary
srx_treemap = srxData %>%
group_by(District, Property.Type) %>%
summarise(
psf_mean=mean(psf),
count=n(Bedrooms)
)
srx_treemap = srxData %>%
group_by(District, Property.Type) %>%
summarise(
psf_mean=mean(PSFBuilt),
count=n(Bedrooms)
)
srx_treemap = srxData %>%
group_by(District, Property.Type) %>%
summarise(
psf_mean=mean(PSFBuilt),
count=n()
)
srx_treemap %>% head
srx_treemap = srxData %>%
group_by(District, Property.Type) %>%
summarise(
psf_mean=mean(PSFBuilt),
count=n()
)
srx_treemap
class(srx_treemap)
srx_treemap = srxData %>%
group_by(District, Property.Type) %>%
summarise(
psf_mean=mean(PSFBuilt),
count=n()
) %>%
as.data.frame
srx_treemap %>% head
srx_treemap
srx_treemap = srxData %>%
group_by(District, Property.Type) %>%
summarise(
psf_mean=mean(PSFBuilt, na.rm=T),
count=n()
) %>%
as.data.frame
srx_treemap %>% head
srx_treemap
srx_treemap
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=District)) +
treemap()
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=District)) +
geom_treemap()
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=District)) +
geom_treemap()
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type)) +
geom_treemap()
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=Distrct)) +
geom_treemap()
srx_treemap %>% summary
srx_treemap = srxData %>%
group_by(District, Property.Type) %>%
summarise(
psf_mean=mean(PSFBuilt, na.rm=T),
count=n()
) %>%
as.data.frame %>%
na.omit
as.data.frame %>%
sdsds\
srx_treemap %>% summary
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=Distrct)) +
geom_treemap()
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=District)) +
geom_treemap()
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=District)) +
geom_treemap() +
geom_treemap_subgroup_border()
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=District)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.5, colour = "black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "white", place = "topleft", reflow = T)
ggplot(srx_treemap, aes(fill=psf_mean, area=count, label=Property.Type, subgroup=District)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.5, colour = "black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "white", place = "topleft", reflow = T) +
scale_fill_gradient(low="green", high="red")
